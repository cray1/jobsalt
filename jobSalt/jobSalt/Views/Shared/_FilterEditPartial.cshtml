@model jobSalt.Models.Field

@using jobSalt.Models;

@switch (@Model)
{
    case Field.Date:
        <div>
            <input type="text" class="form-control" style="height:30px; width:200px" id="datePicker" />
        </div>
        <script type="text/javascript">
            $('#datePicker').datepicker({
                format: 'mm/dd/yyyy',
            });

            function SubmitFilter() {
                alert("date");
            }
        </script>
        break;
    case Field.Location:
        <link type="text/css" rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:300,400,500">

        <input id="autocomplete" placeholder="Search City, State, or Zip" type="text" class="form-control col-lg-4" style="height:30px; width:200px" />
        <input id="@ViewBag.inputID" type="hidden" name="value" />

        <script type="text/javascript">
            var autocomplete;
            autocomplete = new google.maps.places.Autocomplete( (document.getElementById('autocomplete')),
            {
                types: ['geocode'],
                componentRestrictions: { country: "us" }
            });
            function SubmitFilter() {
                var place = autocomplete.getPlace();
                var geocoder = new google.maps.Geocoder();
                var location = {};

                //Just testing something
                for (var i = 0; i < place.address_components.length; i++) {
                    var addressType = place.address_components[i].types[0];

                    if (addressType == "postal_code") {
                        location.ZipCode = place.address_components[i].short_name;
                    }

                    if (addressType == "administrative_area_level_1") {
                        location.State = place.address_components[i].short_name;
                    }

                    if (addressType == "locality") {
                        location.City = place.address_components[i].short_name;
                    }
                }
                debugger;
                $('#@ViewBag.inputID').val = JSON.stringify(location);
                //Done testing

                geocoder.geocode({ 'latLng': place.geometry.location }, function (results, status) {
                    if (status == google.maps.GeocoderStatus.OK) {
                        if (results[1]) {
                            place = results[1];
                            for (var i = 0; i < place.address_components.length; i++) {
                                var addressType = place.address_components[i].types[0];

                                if (addressType == "postal_code") {
                                    location.ZipCode = place.address_components[i].short_name;
                                }

                                if (addressType == "administrative_area_level_1") {
                                    location.State = place.address_components[i].short_name;
                                }

                                if (addressType == "locality") {
                                    location.City = place.address_components[i].short_name;
                                }
                            }
                        }
                    } else {
                        alert("Geocoder failed due to: " + status);
                    }
                    
                    $('#@ViewBag.inputID').val = JSON.stringify(location);
                });
                return false;
            }
        </script>
        <style type="text/css">
            .pac-container {
                z-index: 1051;
            }
        </style>
        break;    
    default:
        <input id="@ViewBag.inputID" class="form-control col-lg-4" name="value" style="height:30px; width:200px" type="text" value="@FilterUtility.GetFilterValue(@Model, ViewBag.FilterString)">
        break;

}
<input type="hidden" id="targetField" name="targetField" value="@Model" />
<input type="hidden" id="filterString" name="filterString" value="@ViewBag.FilterString" />

