@model jobSalt.Models.Field

@using jobSalt.Models;

@switch (@Model)
{
    case Field.Date:
        <div>
            <input type="text" class="form-control" id="datePicker" onclick="event.stopPropagation()" />
        </div>
        <script type="text/javascript">
            $('#datePicker').datepicker({
                format: 'mm/dd/yyyy',
            });

            function SubmitFilter(event) {
                alert("date");
            }
        </script>
        break;
    case Field.Location:
        <link type="text/css" rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:300,400,500">
        <div class="input-group">
            <input id="autocomplete" placeholder="Search City, State, or Zip" type="text" class="form-control col-lg-4 focusable" value="@FilterUtility.GetFilterValue(@Model, ViewBag.FilterString)" onclick="event.stopPropagation()" />
            <span class="input-group-btn">
                <button type="submit" class="btn btn-default"><span class="glyphicon glyphicon-arrow-right"></span></button>
            </span>
        </div>
        <input id="autocomplete-value" type="hidden" name="value" />

        <script type="text/javascript">
            var autocomplete;
            var parsedLocation = false;

            autocomplete = new google.maps.places.Autocomplete( (document.getElementById('autocomplete')),
            {
                types: ['geocode'],
                componentRestrictions: { country: "us" }
            });
            function @(Model)SubmitFilter(event) {

                if (!parsedLocation) {
                    event.preventDefault();

                    var place = autocomplete.getPlace();
                    var geocoder = new google.maps.Geocoder();
                    var location = {};

                    geocoder.geocode({ 'address': $('#autocomplete').val() }, function (results, status) {
                        if (status == google.maps.GeocoderStatus.OK) {
                            if (results[0]) {
                                place = results[0];
                                location = ParseLocation(place);
                                if (!location.ZipCode) {
                                    geocoder.geocode({ 'location': place.geometry.location }, function (results, status) {
                                        if (status == google.maps.GeocoderStatus.OK) {
                                            if (results[0]) {
                                                place = results[0];
                                                location = ParseLocation(place);
                                            }
                                        }

                                        parsedLocation = true;

                                        $('#autocomplete-value').val(JSON.stringify(location));
                                        $('#autocomplete-value').closest("form").submit();
                                    });
                                } else {
                                    parsedLocation = true;

                                    $('#autocomplete-value').val(JSON.stringify(location));
                                    $('#autocomplete-value').closest("form").submit();
                                }
                            }
                        } else {
                            alert("The address could not be parsed.\n Please ensure everything is typed correctly and try again.");
                        } 
                    });
                } else {
                    parsedLocation = false;
                }
            }

            function ParseLocation(place) {
                var location = {};
                for (var i = 0; i < place.address_components.length; i++) {
                    var addressType = place.address_components[i].types[0];

                    if (addressType == "postal_code") {
                        location.ZipCode = place.address_components[i].short_name;
                    }

                    if (addressType == "administrative_area_level_1") {
                        location.State = place.address_components[i].short_name;
                        location.StateLong = place.address_components[i].long_name;
                    }

                    if (addressType == "locality") {
                        location.City = place.address_components[i].long_name;
                    }
                    if (place.geometry) {
                        if (place.geometry.location) {
                            location.Latitude = place.geometry.location.k;
                            location.Longitude = place.geometry.location.A;
                        }
                    }
                }

                return location;
            }

            google.maps.event.addListener(autocomplete, 'place_changed', function () {
                $('#autocomplete-value').closest("form").submit();
            });
        </script>
        <style type="text/css">
            .pac-container {
                z-index: 1051;
            }
        </style>
        break;   
        
    case Field.JobType:
        <div class="input-group">
            <select class="form-control col-lg-4 focusable" name="value" onclick="event.stopPropagation()">
                <option value="@JobType.All">All</option>
                <option value="@JobType.FullTime">Full-Time</option>
                <option value="@JobType.Internship">Internship</option>                
            </select>
            <span class="input-group-btn">
                <button type="submit" class="btn btn-default"><span class="glyphicon glyphicon-arrow-right"></span></button>
            </span>
        </div>
        break;
         
    default:
        <div class="input-group">
            <input placeholder="@FilterUtility.FilterDisplayName(@Model)" class="form-control col-lg-4 focusable" name="value" type="text" value="@FilterUtility.GetFilterValue(@Model, ViewBag.FilterString)" onclick="event.stopPropagation()">
            <span class="input-group-btn">
                <button type="submit" class="btn btn-default"><span class="glyphicon glyphicon-arrow-right"></span></button>
            </span>
        </div>
        break;

}
<input type="hidden" id="targetField" name="targetField" value="@Model" />
<input type="hidden" id="filterString" name="filterString" value="@ViewBag.FilterString" />

